# Optimizes images and creates a pull request following changes in a branch.
# See each parameter's documentation.
#
# Note: The way the PR itself is made is a hack. Improving this having access to a functioning token.
# See: https://github.com/microsoft/azure-pipelines-tasks/issues/9754

parameters:
  # How many files must change for a PR to be created.
  minFiles: 1
  # How many bytes must be reduced for a PR to be created.
  minSize: 1
  # Branch prefix to use, eg. "image_optim/<source-branch>".
  branchPrefix: image_optim
  # List of paths to exclude, eg. ['store/', 'original\ mockups/'].
  # Each path must be single-quoted ('path'), and its spaces escaped ('original\ path').
  excludePaths: []

jobs:
  - job: OptimizeImages
    condition: and(not(startswith(variables['Build.SourceBranch'], 'refs/heads/${{ parameters.branchPrefix }}/')),
                   not(startswith(variables['System.PullRequest.SourceBranch'], '${{ parameters.branchPrefix }}/')))
    pool:
      vmImage: 'macOS-10.15'
    timeoutInMinutes: 120
    steps:
    - checkout: self
      submodules: false
      persistCredentials: true

    - script: |
        # Determine what the target is, depending on this being a PR or a regular push.
        if [ ! -z "$SYSTEM_PULLREQUEST_TARGETBRANCH" ]; then
          git fetch -q origin $SYSTEM_PULLREQUEST_TARGETBRANCH
          target="HEAD $(git merge-base HEAD FETCH_HEAD)"
        else
          target="HEAD~1"
        fi

        # Check if there are image changes before continuing.
        if git diff --name-only $target | egrep -q '\.(jpe?g|png|bmp|pnm|tiff|svg|gif)$'; then
          echo "##vso[task.setvariable variable=CHANGED]true"
        fi
      displayName: 'Detect image changes'

    - script: |
        brew install svgo gnu-sed
        gem install image_optim image_optim_pack
      condition: eq(variables.CHANGED, 'true')
      displayName: 'Install dependencies'

    - script: |
        ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Doist/PipelinesTemplates/master/scripts/optimize-images.rb)" -- \
          --min-files ${{ parameters.minFiles }} --min-size ${{ parameters.minSize }} \
          --exclude ${{ join(' ', parameters.excludePaths) }} > /tmp/result.md
      condition: eq(variables.CHANGED, 'true')
      displayName: 'Optimize images'

    - script: |
        if [ -s /tmp/result.md ]; then
          echo "##vso[task.setvariable variable=OPTIMIZED]true"
          cat /tmp/result.md
        fi
      condition: eq(variables.CHANGED, 'true')
      displayName: 'Detect image optimizations'

    - script: |
        # Commit the changes and push the branch.
        head="${{ parameters.branchPrefix }}/$BUILD_SOURCEBRANCH"
        git checkout -b $head && \
        git add -u && \
        git commit -a -m "Optimize images (lossless)" && \
        git push origin $head --force

        # Create a PR using GitHub's API.
        result=$(cat /tmp/result.md | gsed -z 's/\n/\\n/g')
        token=$(git config --get http.$(Build.Repository.Uri).extraheader | cut -d' ' -f3 | base64 --decode | cut -d':' -f2)
        if [ ! -z "$SYSTEM_PULLREQUEST_SOURCEBRANCH" ]; then
          base="${SYSTEM_PULLREQUEST_SOURCEBRANCH/refs\/heads\//}"
        else
          base="${BUILD_SOURCEBRANCH/refs\/heads\//}"
        fi
        repo="${BUILD_REPOSITORY_URI##*/}"
        owner_url="${BUILD_REPOSITORY_URI%/*}"
        owner_repo="${owner_url##*/}/$repo"
        curl -v \
          -H "Authorization: token $token" \
          -H "Accept: application/vnd.github.machine-man-preview+json" \
          -d "{\"title\":\"Optimize images in $base (lossless)\", \"head\":\"$head\", \"base\":\"$base\", \"body\":\"$result\", \"maintainer_can_modify\":true}" \
          "https://api.github.com/repos/$owner_repo/pulls"

        # Delete temporary branch in case the PR fails.
        result=$?
        if [ $result -ne 0 ]; then
          git push origin --delete $head
        fi
        exit $result
      condition: eq(variables.OPTIMIZED, 'true')
      displayName: 'Create pull request'
